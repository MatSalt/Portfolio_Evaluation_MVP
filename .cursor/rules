# Portfolio Evaluation MVP - Cursor Rules

## 프로젝트 개요
이 프로젝트는 AI Vision 모델과 Google Search 기능을 통합하여 증권사 앱의 포트폴리오 스크린샷(단일 또는 다중)을 분석하고, **구조화된 JSON 데이터**를 생성하여 **4개 탭으로 구성된 인터랙티브 UI**에 표시하는 MVP입니다. 사용자는 업로드한 포트폴리오에 대해 AI 총평, 3대 핵심 기준 스코어, 강점/약점/기회 분석, 개별 종목의 5가지 평가 기준별 상세 분석을 받을 수 있습니다.

## 기술 스택
- **프론트엔드**: Next.js 15.5.3 (TypeScript)
- **UI 라이브러리**: Tailwind CSS, Headless UI (탭 컴포넌트)
- **차트/시각화**: Chart.js 또는 Recharts (점수 시각화)
- **백엔드**: Python 3.13.7, FastAPI 0.116.1
- **AI 모델**: Google Gemini 2.5 Flash API (google-genai Python SDK)
  - **구조화된 출력**: Pydantic 모델을 사용한 JSON 스키마 정의
  - **Google Search 통합**: Gemini API의 `google_search` 도구를 활용한 실시간 웹 검색
  - **그라운딩 기능**: 검색된 정보를 기반으로 한 정확한 분석 제공
- **데이터 검증**: Pydantic (백엔드), Zod (프론트엔드)
- **마크다운 렌더링**: react-markdown, remark-gfm (하위 호환성)
- **배포**: Vercel (Frontend), Render (Backend)

## 기술 스택 최신화 정책
1. **정기 업데이트**: 매월 첫째 주에 모든 기술 스택의 최신 버전을 확인합니다.
2. **검색 기준**: 기술 스택 검색 시 항상 당일(2025년 9월 12일) 기준으로 최신 버전을 확인합니다.
3. **신뢰할 수 있는 정보원**: 
   - Next.js: https://nextjs.org/
   - FastAPI: https://fastapi.tiangolo.com/
   - Python: https://www.python.org/
   - Google AI: https://ai.google.dev/
4. **업데이트 절차**:
   - 당일 기준 최신 버전 확인 후 호환성 검토
   - 개발 환경에서 테스트 후 적용
   - 변경사항 문서화 및 팀 공유
5. **버전 고정**: package.json과 requirements.txt에 정확한 버전 명시

## 코딩 규칙

### 일반 규칙
1. 모든 코드는 한국어 주석을 사용합니다.
2. 변수명과 함수명은 영어를 사용하되, 주석은 한국어로 작성합니다.
3. TypeScript를 사용할 때는 엄격한 타입 체크를 적용합니다.
4. Python 코드는 PEP 8 스타일 가이드를 따릅니다.

### 프론트엔드 (Next.js)
1. **Next.js 관련 코드 작성 시 항상 공식 문서 참고 필수**:
   - 공식 문서: https://nextjs.org/docs
   - GitHub 저장소: https://github.com/vercel/next.js
   - **Next.js LLMS 상세 정보**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/nextjs-llms-full.txt`
2. 컴포넌트는 함수형 컴포넌트와 React Hooks를 사용합니다.
3. 상태 관리는 useState와 useEffect를 우선 사용합니다.
4. API 호출은 fetch API를 사용하며, async/await 패턴을 적용합니다.
5. 에러 처리는 try-catch 블록을 사용합니다.
6. 파일 구조:
   - `src/app/page.tsx`: 메인 페이지
   - `src/components/ImageUploader.tsx`: 이미지 업로드 컴포넌트 (다중 이미지 지원)
   - `src/components/AnalysisDisplay.tsx`: 분석 결과 표시 컴포넌트 (하위 호환성)
   - `src/components/TabbedAnalysisDisplay.tsx`: 탭 기반 분석 결과 표시 컴포넌트

### 백엔드 (FastAPI)
1. **FastAPI 관련 코드 작성 시 항상 공식 문서 참고 필수**:
   - 공식 문서: https://fastapi.tiangolo.com/reference/
   - GitHub 저장소: https://github.com/fastapi/fastapi
2. 모든 API 엔드포인트는 비동기 함수로 작성합니다.
3. 요청/응답 모델은 Pydantic을 사용하여 정의합니다.
4. 에러 처리는 HTTPException을 사용합니다.
5. 파일 구조:
   - `main.py`: FastAPI 앱 진입점
   - `api/analyze.py`: 포트폴리오 분석 API (구조화된 출력 지원)
   - `models/`: Pydantic 모델 정의 (구조화된 출력 스키마)
   - `services/`: 비즈니스 로직

### Gemini API 연동
1. Google AI Studio API 키를 환경변수로 관리합니다.
2. `google-genai` Python SDK를 사용합니다.
3. **Gemini 관련 코드 작성 시 항상 공식 문서 참고 필수**:
   - GitHub: https://github.com/googleapis/python-genai
   - 공식 문서: https://googleapis.github.io/python-genai/
   - **Gemini LLMS 상세 정보**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/gemini_llms.txt`
   - **Google Search 통합**: https://ai.google.dev/gemini-api/docs/google-search?hl=ko
   - **Live API 도구 사용**: https://ai.google.dev/gemini-api/docs/live-tools?hl=ko
4. 이미지는 Base64로 인코딩하여 전송합니다.
5. **Google Search 도구를 활성화하여 실시간 웹 검색 기능을 활용합니다**:
   ```python
   tools = [{"google_search": {}}]
   config = {"tools": tools}
   ```
6. **Two-step 생성 전략(권장)**:
   - **스텝1: 검색·그라운딩 호출(도구 사용)**
     - Google Search Tool 활성화, `response_mime_type` 미지정(텍스트)
     - 최신 정보/사실(facts), 출처(sources), 표(rows)를 구조화된 텍스트로 추출
   - **스텝2: 구조화 JSON 생성(도구 미사용)**
     - 스텝1 산출물을 컨텍스트로 주고 `response_mime_type: application/json`으로 순수 JSON 생성
     - 필요 시 `<JSON_START>/<JSON_END>` 태그 지시 및 서버측 안전 추출 적용
   - 서버는 Pydantic으로 최종 JSON 검증, 실패 시 1회 보정 재시도 후 사용자 친화적 오류 반환
7. 프롬프트는 포트폴리오 분석 전문가 역할로 설계하여 **구조화된 JSON 형식**으로 다음을 생성하도록 합니다:
   - **4개 탭으로 구성된 구조화된 JSON 출력**:
     - 총괄 요약 탭: 종합 스코어, 핵심 기준 스코어, 강점/약점
     - 포트폴리오 심층 분석 탭: 상세 분석, 기회 및 개선 방안
     - 개별 종목 스코어 탭: 모든 종목의 5가지 평가 기준별 점수 테이블
     - 핵심 종목 상세 분석 탭: 주요 종목의 카테고리별 상세 분석
8. API 호출은 Two-step 전략으로 최적화하며, 하위 호환성을 위해 마크다운 텍스트 응답도 지원합니다.

### API 설계
1. 이미지 업로드: `POST /api/analyze` (단일/다중 이미지 통합)
2. 요청 형식: `multipart/form-data`
3. 요청 Body: `files` (이미지 파일 배열, 1-5개), `format` (선택사항: "json" 또는 "markdown")
4. 응답 형식: 
   - 구조화된 JSON (기본값, 4개 탭 데이터 포함)
   - 마크다운 텍스트 (하위 호환성, format=markdown 시)

### 데이터 형식
**구조화된 JSON 출력 (기본값):**
```json
{
  "portfolioReport": {
    "version": "1.0",
    "reportDate": "2025-09-30",
    "tabs": [
      {
        "tabId": "dashboard",
        "tabTitle": "총괄 요약",
        "content": {
          "overallScore": {
            "title": "포트폴리오 종합 스코어",
            "score": 72,
            "maxScore": 100
          },
          "coreCriteriaScores": [...],
          "strengths": [...],
          "weaknesses": [...]
        }
      }
      // ... 4개 탭의 전체 구조화된 데이터
    ]
  },
  "processing_time": 15.2,
  "request_id": "uuid-string",
  "images_processed": 3
}
```

**마크다운 출력 (하위 호환성):**
```json
{
  "content": "**AI 총평:** [포트폴리오 전략과 주요 리스크를 2-3문장으로 요약]\n\n**포트폴리오 종합 스코어: [0-100] / 100**\n\n... (expected_result.md와 동일한 마크다운 형식)",
  "processing_time": 15.2,
  "request_id": "uuid-string",
  "images_processed": 3
}
```

### 에러 처리
- 400: 잘못된 요청 (이미지 파일이 아님, 파일 개수가 1-5개 범위를 벗어남)
- 500: 내부 서버 오류 (Gemini 응답 형식 오류, 구조화된 출력 파싱 실패)
- 503: 서비스 불가 (Gemini API 호출 실패)
- **Graceful degradation**: 구조화된 출력 실패 시 마크다운 출력으로 fallback

## 개발 우선순위
1. 이미지 업로드 기능 (단일/다중 지원)
2. Gemini Vision API 연동 및 구조화된 출력 구현
3. Google Search 기능 통합
4. 탭 기반 UI 구현 (TabbedAnalysisDisplay)
5. 구조화된 출력 최적화 및 테스트
6. 하위 호환성 보장 (마크다운 출력)

## 테스트
- 프론트엔드: Jest + React Testing Library
- 백엔드: pytest
- API 테스트: 
  - 구조화된 JSON 출력 품질 테스트 (단일/다중 이미지)
  - 마크다운 출력 품질 테스트 (하위 호환성)
  - 탭 기반 UI 렌더링 테스트

## 보안 고려사항
1. 업로드된 이미지는 처리 후 즉시 삭제
2. Gemini API 키는 환경변수로 관리
3. 파일 크기 제한 (예: 10MB)
4. 허용된 이미지 형식만 업로드 가능 (PNG, JPEG)
5. 다중 이미지 업로드 시 최대 5개 파일 제한
6. API 호출 빈도 제한 (Rate Limiting)

## Git 커밋 규칙
1. **사용자 명시적 요청 시에만 커밋 수행**: 사용자가 "커밋해줘", "commit", "git commit" 등으로 명시적으로 요청할 때만 커밋을 실행합니다.
2. **자동 커밋 금지**: 파일 수정 후 자동으로 커밋하지 않습니다.
3. **커밋 전 확인**: 커밋 전에 변경사항을 사용자에게 알리고 승인을 받습니다.
4. **의미 있는 커밋 메시지**: Conventional Commits 형식을 사용하여 명확한 커밋 메시지를 작성합니다.
