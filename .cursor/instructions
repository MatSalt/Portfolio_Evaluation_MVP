# Portfolio Evaluation MVP - 개발 가이드라인

## 프로젝트 목표
증권사 앱의 포트폴리오 스크린샷을 업로드하면 AI Vision 모델을 통해 종합적인 포트폴리오 분석을 수행하고, expected_result.md와 동일한 형식의 마크다운 텍스트로 전문적인 투자 분석 리포트를 제공하는 MVP를 개발합니다. 사용자는 AI 총평, 리니아 스코어, 3대 핵심 기준 분석, 강점/약점/기회 분석, 개별 종목의 5가지 평가 기준별 상세 분석을 받을 수 있습니다.

## 핵심 기능
1. **이미지 업로드**: 드래그 앤 드롭 또는 파일 선택으로 포트폴리오 스크린샷 업로드
2. **AI 분석**: Google Gemini 2.5 Flash API (google-genai Python SDK)를 사용한 종합적인 포트폴리오 분석
3. **전문 분석 리포트**: AI 총평, 리니아 스코어, 3대 핵심 기준 분석, 강점/약점/기회 분석, 개별 종목 상세 분석
4. **마크다운 표시**: 분석 결과를 마크다운 텍스트로 화면에 렌더링
5. **에러 처리**: 사용자 친화적인 에러 메시지 표시

## 개발 시 주의사항

### 프론트엔드 개발
- **Next.js 관련 코드 작성 시 항상 공식 문서 참고 필수**:
  - 공식 문서: https://nextjs.org/docs
  - GitHub 저장소: https://github.com/vercel/next.js
  - **Next.js LLMS 상세 정보**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/nextjs-llms-full.txt`
- Next.js App Router 사용
- TypeScript 엄격 모드 적용
- 컴포넌트는 재사용 가능하도록 설계
- 상태 관리는 로컬 상태 우선, 필요시 전역 상태 고려
- 반응형 디자인 적용 (모바일 우선)

### 백엔드 개발
- **FastAPI 관련 코드 작성 시 항상 공식 문서 참고 필수**:
  - 공식 문서: https://fastapi.tiangolo.com/reference/
  - GitHub 저장소: https://github.com/fastapi/fastapi
- FastAPI의 비동기 처리 활용
- Pydantic을 사용한 데이터 검증
- 환경변수로 API 키 관리
- 로깅 시스템 구축
- CORS 설정으로 프론트엔드와 연동

### Gemini API 연동
- Google AI Studio에서 API 키 발급
- `google-genai` Python SDK 최신 버전 사용
- **Gemini LLMS 상세 정보 참고**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/gemini_llms.txt`
- Gemini 2.5 Flash 모델의 Vision 기능 활용
- 이미지 전처리 (크기 조정, 압축 등)
- 포트폴리오 분석 전문가 역할의 프롬프트 설계:
  - expected_result.md와 동일한 마크다운 형식으로 출력 요청
  - AI 총평 (2-3문장으로 전략과 주요 리스크 요약)
  - 종합 리니아 스코어 (0-100점)
  - 3대 핵심 기준 스코어 (성장 잠재력, 안정성 및 방어력, 전략적 일관성)
  - 각 기준별 상세 분석 (3-4문장, 구체적 인사이트 포함)
  - 강점/약점/기회 분석 (실행 가능한 조언 및 간단한 What-if 시나리오 포함)
  - 개별 종목별 5가지 평가 기준 점수 (펀더멘탈, 기술 잠재력, 거시경제, 시장심리, CEO/리더십)
  - 종목별 상세 분석 (각 기준별 구체적 평가)
- 마크다운 텍스트를 그대로 반환 (파싱 불필요)

### 기술 스택 버전 관리
- **Next.js 15.5.3**: 최신 App Router 및 성능 최적화 기능 활용
- **FastAPI 0.116.1**: 최신 비동기 처리 및 보안 패치 적용
- **Python 3.13.7**: 최신 언어 기능 및 성능 개선사항 활용
- **정기 업데이트**: 매월 첫째 주 기술 스택 최신 버전 확인 및 적용
- **검색 기준**: 기술 스택 검색 시 항상 당일(2025년 9월 12일) 기준으로 최신 버전 확인

## 파일 구조
```
프로젝트 루트/
├── frontend/                 # Next.js 프론트엔드
│   ├── src/
│   │   ├── app/
│   │   │   └── page.tsx     # 메인 페이지
│   │   └── components/
│   │       ├── ImageUploader.tsx
│   │       └── AnalysisDisplay.tsx
│   ├── package.json
│   └── next.config.js
├── backend/                  # FastAPI 백엔드
│   ├── main.py
│   ├── api/
│   │   └── analyze.py
│   ├── models/
│   │   └── portfolio.py
│   ├── services/
│   │   └── gemini_service.py
│   ├── requirements.txt
│   └── .env
└── Docs/
    └── PRD.md
```

## 개발 순서
1. **프로젝트 초기 설정**
   - Next.js 프로젝트 생성
   - FastAPI 프로젝트 생성
   - 환경변수 설정 (Gemini API 키)

2. **백엔드 API 개발**
   - FastAPI 앱 설정
   - 이미지 업로드 엔드포인트 구현
   - Gemini API 연동 서비스 구현
   - 마크다운 텍스트 응답 처리

3. **프론트엔드 개발**
   - 이미지 업로드 컴포넌트
   - API 호출 로직
   - 마크다운 텍스트 렌더링 컴포넌트
   - 에러 처리 UI

4. **통합 테스트**
   - 전체 플로우 테스트
   - 다양한 이미지 형식 테스트
   - 에러 케이스 테스트

## Gemini API 사용법
```python
from google import genai

# API 키 설정
client = genai.Client(api_key='YOUR_GEMINI_API_KEY')

# 이미지와 프롬프트로 포트폴리오 분석 요청
response = client.models.generate_content(
    model='gemini-2.5-flash',
    contents=[prompt_text, image_data]
)
```

## 테스트 전략
- **단위 테스트**: 각 컴포넌트와 함수별 테스트
- **통합 테스트**: API 엔드포인트 테스트
- **E2E 테스트**: 전체 사용자 플로우 테스트
- **성능 테스트**: 이미지 처리 속도 및 메모리 사용량
- **Gemini API 테스트**: 다양한 포트폴리오 이미지로 마크다운 출력 품질 테스트

## 배포 고려사항
- **프론트엔드**: Vercel 배포
- **백엔드**: Render 또는 Railway 배포
- **환경변수**: 각 플랫폼의 환경변수 설정
- **도메인**: CORS 설정으로 도메인 연결

## 성능 최적화
- **분석 품질 최우선**: Gemini API 호출 시 비용이나 속도보다 상세하고 정확한 분석 결과를 얻도록 설정
- 이미지 압축 및 리사이징
- API 응답 캐싱
- 프론트엔드 코드 스플리팅
- 백엔드 비동기 처리 최적화

## 보안 고려사항
- 파일 업로드 보안 (파일 형식, 크기 제한)
- Gemini API 키 보안 (환경변수 사용)
- CORS 정책 설정
- 입력 데이터 검증 및 샌타이징
- API 호출 빈도 제한

## 모니터링 및 로깅
- API 호출 로그
- 에러 로그 수집
- 성능 메트릭 수집
- 사용자 행동 분석
- Gemini API 사용량 모니터링

## 확장성 고려사항
- 마이크로서비스 아키텍처 고려
- 데이터베이스 연동 준비
- 사용자 인증 시스템 확장 가능성
- 다국어 지원 준비
- 다른 AI 모델로의 전환 가능성

## 참고 자료
- **Next.js LLMS 상세 정보**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/nextjs-llms-full.txt`
  - Next.js의 언어 모델 서비스(LLMS)에 대한 상세한 정보가 포함되어 있습니다.
  - Next.js 관련 개발 시 필요에 따라 이 파일을 참고하세요.
- **Gemini LLMS 상세 정보**: `/Users/choongheon/Desktop/Rinia/projects/Portfolio_Evaluation_MVP/Docs/gemini_llms.txt`
  - Gemini API에 대한 상세한 정보가 포함되어 있습니다.
  - Gemini API 관련 개발 시 필요에 따라 이 파일을 참고하세요.
